# Core Principles

SOLID, DRY, KISS, YAGNI!

ALWAYS TAKE ARG AS OBJECT! (for easy refactoring)

INTERFACE DRIVEN!
All class MUST define interface at start. for easy mocking and readability. define in same file.

```ts
export abstract class UserRepository { ... }
class UserRepositoryImpl implements UserRepository { ... }
export const UserRepositoryProvider: Provider = { ... }
```

TEST DRIVEN DEVELOPMENT: TEST is MUST!!

STRUCTURED BY FEATURE(MODULE)
Organize code by features (e.g., auth, workspaces, uploads) rather than layers (controllers, services, repositories). This promotes better understanding, maintainability, and easier collaboration within a small team.

DECOUPLING
Keep components loosely coupled through interfaces and dependency injection to enable changes and reuse.

Convention over Configuration
Adopt conventions for directory and file naming to reduce overhead.

RULE

1. Custom exception per module
2. Entity: is pure entity. Not typeorm entity
3. Schema: is a typeorm entity
4. Tests: under modules `tests` directory

## Tools and styple

- NestJS
- yarn
- typescript: strict

## FILE NAMING

Let's say you want to add a "notifications" feature. With this structure, you would:

Create a notifications folder within the apps/api/src folder with:
notifications.module.ts
notifications.controller.ts
notifications.dto.ts
notifications.service.ts
notifications.service.interface.ts
notifications.service.spec.ts
